解读密码
nowcoder要和朋友交流一些敏感的信息，例如他的电话号码等。因此他要对这些敏感信息进行混淆，比如在数字中间掺入一些额外的符号，让它看起来像一堆乱码。
现在请你帮忙开发一款程序，解析从nowcoder那儿接收到的信息，读取出中间有用的信息。

输入描述:
输入有多行。

每一行有一段经过加密的信息（其中可能包含空格），并且原始信息长度不确定。


输出描述:
输出每段信息中数字信息。
示例1
输入
$Ts!47&*s456  a23* +B9k
输出
47456239
代码如下;
// write your code here cpp
#include<string>
#include<iostream>
using namespace std;
int main()
{
    string str;
    while(getline(cin,str))
    {
        for(int i=0;i<str.size();i++)
        {
            if('0'<=str[i]&&str[i]<='9')
            {
                cout<<str[i];
            }
        }
        cout<<endl;
    }
    return 0;
}

走迷宫
NowCoder最喜欢游乐场的迷宫游戏，他和小伙伴们比赛谁先走出迷宫。
现在把迷宫的地图给你，你能帮他算出最快走出迷宫需要多少步吗？

输入描述:
输入包含多组数据。

每组数据包含一个10*10，由“#”和“.”组成的迷宫。其中“#”代表墙；“.”代表通路。

入口在第一行第二列；出口在最后一行第九列。

从任意一个“.”点都能一步走到上下左右四个方向的“.”点。


输出描述:
对应每组数据，输出从入口到出口最短需要几步。
示例1
输入
#.########
#........#
#........#
#........#
#........#
#........#
#........#
#........#
#........#
########.#
#.########
#........#
########.#
#........#
#.########
#........#
########.#
#........#
#.######.#
########.#
输出
16
30


#include<iostream>
using namespace std;
char map[11][11];
bool visited[11][11];
int dir[4][2]={-1,0,1,0,0,-1,0,1};
int minStep=65535;
bool judge(int x,int y,int step)
{
    if((10-x)+(9-y)+step<minStep)
        return true;
    else
        return false;
}
void game(int x,int y,int step)
{
    if(x==10&&y==9)//到达出口
    {
        if(step<minStep)
        {
            minStep=step;
            return;
        }
     }
     else
     {
        for(int i=0;i<4;i++)
        {
            int nx=x+dir[i][0];
            int ny=y+dir[i][1];
            if(judge(x,y,step)&&nx>=1&&nx<=10&&ny>=1&&ny<=10&&visited[nx][ny]==false&&map[nx][ny]=='.')
            {
                visited[nx][ny]=true;
                game(nx,ny,step+1);
                visited[nx][ny]=false;
             }
        }
     }
}
int main()
{
    while(cin>>map[1][1])
    {
        minStep=65535;
        visited[1][1]=false;
        for(int i=1;i<=10;i++)
            for(int j=1;j<=10;j++)
            {
                if(i==1&&j==1)  continue;
                cin>>map[i][j];
                visited[i][j]=false;
            }
        visited[1][2]=true;
        game(1,2,0);
        cout<<minStep<<endl;;
    }
    return 0;
}