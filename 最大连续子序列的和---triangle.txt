HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。
今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，
你会不会被他忽悠住？(子向量的长度至少是1)
class Solution {
public:
    int FindGreatestSumOfSubArray(vector<int> array) {
       if(array.size()==0)
           return 0;
       // vector<int > f(array.size(),0);
      //f[0]=a[0];
      int f=array[0];
       int maxSum=array[0];
        for(int i=1;i<array.size();i++)
        {
            f=max(f+array[i],array[i]);
            maxSum=max(f,maxSum);
        }
        
       /* int maxSum=f[0];
        for(int i=1;i<array.size();i++)
        {
            maxSum=max(maxSum,f[i]);
        }*/
        return maxSum;
    }
};

triangle
Given a triangle, find the minimum path sum from top to bottom. 
Each step you may move to adjacent numbers on the row below. 
For example, given the following triangle 
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
class Solution {
public:
    int minimumTotal(vector<vector<int> > &triangle) {
        if(triangle.empty())
            return 0;
        vector<vector<int >> minT(triangle);
        for(int i=triangle.size()-2;i>=0;i--)
        {
            for(int j=0;j<=i;j++)
            {
                minT[i][j]=min(minT[i+1][j],minT[i+1][j+1])+minT[i][j];
            }
        }
        return minT[0][0];
        //最后一列，第一列
        /*for(int i=1;i<minT.size();i++)
        {
            minT[i][0]=minT[i-1][0]+triangle[i][0];
            minT[i][i]=minT[i-i][i-1]+triangle[i][i];
        }
        for(int i=2;i<minT.size();i++)
        {
            for(int j=1;j<i;j++)
            {
                minT[i][j]=min(minT[i-1][j],minT[i-1][j-1])+triangle[i][j];
            }
        }
        int row=minT.size();
        int maxP=minT[row-1][0];
        for(int i=1;i<row;i++)
        {
            maxP=min(maxP,minT[row-1][i]);
        }
        return maxP;*/
        
    }
};