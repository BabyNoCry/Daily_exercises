天数转换

根据输入的日期，计算是这一年的第几天。。

详细描述：

输入某年某月某日，判断这一天是这一年的第几天？。


 

输入描述:
输入三行，分别是年，月，日



输出描述:
成功:返回outDay输出计算后的第几天;
                                           失败:返回-1
#include<iostream>
using namespace std;
int IS_ping(int year)//1代表是，0代表不是平年
{
    if(year%400==0||(year%4==0&&year%100!=0))
        return 0;
    return 1;
}
int main()
{
    int year,month,day;
    int p_year[]={0,31,28,31,30,31,30,31,31,30,31,30,31};
    
  while (cin>>year>>month>>day)
  {
      int count=0;
        if(1<=month&&month<=12)
        {
            if(p_year[month]>=day&&day>=1)
            {
                
                for(int i=0;i<month;i++)
                {
                    count+=p_year[i];
                }
                count+=day;
            }
            else
            {
                cout<<-1;
            }
        }
        else
        {
            cout<<-1;
        }
    if(IS_ping(year)==0)
    {
        count++;
    }
    cout<<count;
  }
    
    return 0;
}


幸运的袋子

一个袋子里面有n个球，每个球上面都有一个号码(拥有相同号码的球是无区别的)。如果一个袋子是幸运的当且仅当所有球的号码的和大于所有球的号码的积。
例如：如果袋子里面的球的号码是{1, 1, 2, 3}，这个袋子就是幸运的，因为1 + 1 + 2 + 3 > 1 * 1 * 2 * 3
你可以适当从袋子里移除一些球(可以移除0个,但是别移除完)，要使移除后的袋子是幸运的。现在让你编程计算一下你可以获得的多少种不同的幸运的袋子。

输入描述:
第一行输入一个正整数n(n ≤ 1000)
第二行为n个数正整数xi(xi ≤ 1000)


输出描述:
输出可以产生的幸运的袋子数
示例1
输入
3
1 1 1
输出
2


#include <iostream>
#include <stdlib.h>
using namespace std;
 
int n;
int nums[1000];
 
int cmp(const void * a, const void * b) {
    return *(int*)a - *(int*)b;
}
 
// 思路：DFS生成全组合，同时注意剪枝、避免重复组合
int findall(int nums[], int index, long sum, long multi) {
    int count = 0;
    for(int i=index; i<n; i++) {
        sum += nums[i];
        multi *= nums[i];
        if(sum > multi)
            count += 1 + findall(nums, i+1, sum, multi);
        else if(nums[i] == 1)
            count += findall(nums, i+1, sum, multi);
        else
            break;
        sum -= nums[i];
        multi /= nums[i];
        // 跳过相等的元素，避免重复组合
        while(i<n-1 && nums[i]==nums[i+1])
            i++;
    }
    return count;
}
 
int main(int argc, char* argv[])
{
    while(cin >> n) {
        for(int i=0; i<n; i++)
            cin >> nums[i];
         
        // 从小到大排序
        qsort(nums, n, sizeof(int), cmp);
        cout << findall(nums, 0, 0, 1) << endl;
    }
     
    return 0;
}


思路：

题目可以转化成求符合条件的集合真子集个数。每次从全集中选择若干元素（小球）组成子集（袋子）。集合子集个数为2^n个，使用dfs必然超时。且此题有重复元素，那么就搜索剪枝。
对于任意两个正整数a,b如果满足 a+b>a*b，则必有一个数为1.可用数论证明：
设a=1+x,b=1+y，则1+x+1+y>(1+x)*(1+y)，--->  1>x*y，则x，y必有一个为0，即a,b有一个为1.
推广到任意k个正整数，假设a1,a2,...ak，如果不满足给定条件，即和sum小于等于积pi，
如果此时再选择一个数b,能使其满足sum+b > pi*b，则，b必然为1，且为必要非充分条件。
反之，如果选择的b>1，则sum+b <=pi*b，即a1,a2,...,ak,b不满足给定条件。（搜索剪枝的重要依据）

因此，将球按标号升序排序。每次从小到大选择，当选择到a1,a2,...,ak-1时满足给定条件，而再增加选择ak时不满足条件（ak必然大于等于max(a1,a2,...,ak-1)），继续向后选择更大的数，必然无法满足！因此，可以进行剪枝。
如果有多个1，即当k=1时，sum(1)>pi(1)不满足，但下一个元素仍为1，则可以满足1+1>1*1，所以要判断当前ak是否等于1.
此外，对于重复数字，要去重复。

#include <stdio.h>
#include <stdlib.h>
int bag[1001],n;
 
int comp(const void *a,const void *b){
    return *(int*)a - *(int*)b;
}
int dfs(int pos,long long sum,long long pi){
    int i,c;
    for(i=pos,c=0;i<n;++i){
        sum+=bag[i];
        pi*=bag[i];
        if (sum>pi) c+=1+dfs(i+1,sum,pi);
        else if (bag[i]==1) c+=dfs(i+1,sum,pi);
        else break;
        sum-=bag[i];
        pi/=bag[i];
        for(;i<n-1 && bag[i]==bag[i+1];++i);// duplicate
    }
    return c;
}
int main(){
    int i;
    while(~scanf("%d",&n)){
        for(i=0;i<n;scanf("%d",&bag[i++]));
        qsort(bag,n,sizeof(int),comp);
        printf("%d\n",dfs(0,0,1));
    }
    return 0;
}
