正则表达式匹配
给你一个字符串?s?和一个字符规律?p，请你来实现一个支持 '.'?和?'*'?的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖?整个?字符串?s的，而不是部分字符串。

说明:

s?可能为空，且只包含从?a-z?的小写字母。
p?可能为空，且只包含从?a-z?的小写字母，以及字符?.?和?*。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释:?因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例?3:

输入:
s = "ab"
p = ".*"
输出: true
解释:?".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释:?因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false


class Solution {
public:
    bool isMatch(string s, string p) {
        S=s;
        P=p;
        PS=s.size();
        PN=p.size();
        dfs(0,0);
        return ok;
    }
    void dfs(int poss,int posp)
    {
        if(ok)
            return;
        if(poss==PS&&posp==PN)
        {
            ok=true;
            return;
        }
        if(poss>PS||posp>PN)
            return;
        if(posp<PN-1&&P[posp+1]=='*')
        {
            int t = times(poss,posp);
            for(int i=0;i<=t;i++)
            {
                dfs(poss+i,posp+2);
            }
        }
        if(S[poss]!=P[posp]&&P[posp]!='.')
            return;
        dfs(poss+1,posp+1);
    }  
    int times(int poss, int posp)
    {
        char t = P[posp];
        int cnt=0;
        for(int i=poss;i<PS;i++)
        {
            if(S[i]==t||t=='.')
                cnt++;
            else
                break;
        }
        return cnt;
    }
private:
    bool ok=false;
    int PS,PN;
    string S,P;
};
