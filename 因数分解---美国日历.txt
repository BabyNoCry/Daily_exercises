分解因数
所谓因子分解，就是把给定的正整数a，分解成若干个素数的乘积，即 a = a1 × a2 × a3 × ... × an,并且 1 < a1 ≤ a2 ≤ a3 ≤ ... ≤ an。其中a1、a2、...、an均为素数。 先给出一个整数a，请输出分解后的因子。

输入描述:
输入包含多组数据，每组数据包含一个正整数a（2≤a≤1000000）。


输出描述:
对应每组数据，以“a = a1 * a2 * a3...”的形式输出因式分解后的结果。
示例1
输入
10
18
输出
10 = 2 * 5
18 = 2 * 3 * 3

// write your code here cpp
#include<iostream>

using namespace std;
int main()
{
    int a,i=0;
    while(cin>>a)
    {
       cout<<a<<" = ";
        i=2;
        while(1)
        {
            
            if(a%i==0)
            {
                cout<<i;
                a/=i;
                break;
            }
            i++;
                
        }
        
        while(a!=1)
        {
            i=2;
            while(1)
            {
                if(a%i==0)
                {
                    cout<<" * "<<i;
                    a/=i;
                    break;
                }
                i++;
            }
        }
        cout<<endl;
       
    }
    return 0;
}

美国节日
和中国的节日不同，美国的节假日通常是选择某个月的第几个星期几这种形式，因此每一年的放假日期都不相同。具体规则如下：
* 1月1日：元旦
* 1月的第三个星期一：马丁・路德・金纪念日
* 2月的第三个星期一：总统节
* 5月的最后一个星期一：阵亡将士纪念日
* 7月4日：美国国庆
* 9月的第一个星期一：劳动节
* 11月的第四个星期四：感恩节
* 12月25日：圣诞节
现在给出一个年份，请你帮忙生成当年节日的日期。

输入描述:
输入包含多组数据，每组数据包含一个正整数year（2000≤year≤9999）。


输出描述:
对应每一组数据，以“YYYY-MM-DD”格式输出当年所有的节日日期，每个日期占一行。

每组数据之后输出一个空行作为分隔。
示例1
输入
2014
2013
输出
2014-01-01
2014-01-20
2014-02-17
2014-05-26
2014-07-04
2014-09-01
2014-11-27
2014-12-25

2013-01-01
2013-01-21
2013-02-18
2013-05-27
2013-07-04
2013-09-02
2013-11-28
2013-12-25

代码如下：
（myself）
#include<iostream>
using namespace std;
int IS_Ryear(int year)//是  1  不是 0
{
    if(year%400==0||(year%4==0&&year%100!=0)) 
       {
           return 1;
       }
       return 0;
}
void YD(int year)//元旦
{
    cout<<year<<"-01-01"<<endl;        
}
void MTin(int year,int all_day)//马丁
 {
     int week=(all_day-1+6)%7;
     int day=0;
     int i=0;
     while(i!=3)
     {
        week+=1;
         day++;
         if(week%7==1)
         {
             i++;
         }
         
     }
     if(day>9)
     cout<<year<<"-01-"<<day<<endl;
     else
     cout<<year<<"-01-"<<day<<endl; 
 }
 void ZT(int year,int all_day)
 {
     int week=(all_day-1+6+31)%7;
     int day=0;
     int i=0;
     while(i!=3)
     {
        week+=1;
         day++;
         if(week%7==1)
         {
             i++;
         }
         
     }
     if(day>9)
     cout<<year<<"-02-"<<day<<endl;
     else
      cout<<year<<"-02-0"<<day<<endl;
 }
void ZW(int year,int all_day,int day[])//阵亡
{
         for(int i=0;i<5;i++)
         {
             all_day+=day[i];
         }
        if(IS_Ryear(year)==1)
            all_day++;
        int week=(all_day-1+6)%7;
        int day1=0;
        while(week%7!=1)
        {
        	week--;
            day1++;
        }
        if(31-day1>9)
        cout<<year<<"-05-"<<(31-day1)<<endl;
        else
         cout<<year<<"-05-0"<<(31-day1)<<endl;
 }
 void GQ(int year,int all_day)//国庆
       {
           cout<<year<<"-07-04"<<endl;
       }
 void LD(int year,int all_day,int day[])
       {
          for(int i=0;i<8;i++)
         {
             all_day+=day[i];
         }
        if(IS_Ryear(year)==1)
            all_day++;
        int week=(all_day-1+6)%7;
        int day1=0;
        while(week%7!=1)
        {
            day1++;
            week++;
        }
        if(day1>9)
        cout<<year<<"-09-"<<day1<<endl;  
        else
        cout<<year<<"-09-0"<<day1<<endl;  

       }
  void GN(int year,int all_day,int day[])//
       {
     for(int i=0;i<10;i++)
         {
             all_day+=day[i];
         }
        if(IS_Ryear(year)==1)
            all_day++;
        int week=(all_day-1+6)%7;
        int day1=0;
           int i=0;
           while(i!=4)
           {
               week++;
               day1++;
                 if(week%7==4)
                     i++;
           }
           if(day1>9)
           cout<<year<<"-11-"<<day1<<endl;
           else
           cout<<year<<"-11-0"<<day1<<endl;
           
       }
       
 void SD(int year,int all_day)
       {
           cout<<year<<"-12-"<<25<<endl;
       }
int main()
{
    int year;
    while(cin>>year)
	{
	 
    int all_day=0;
    int day[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    for(int i=2000;i<year;i++)
    {
        if(IS_Ryear(i)==1)
            all_day+=366;
        else
            all_day+=365;
    }
    YD(year);
    MTin(year,all_day);
    ZT(year,all_day);
    ZW(year,all_day,day);
    GQ(year,all_day);
    LD(year,all_day,day);
    GN(year,all_day,day);
    SD(year,all_day);
}
 
    return 0;
}

//other
#include "iostream"
using namespace std;
int WeekToDay(int y,int m,int c,int w,bool B){//输入哪年哪月第几个星期几，以及正数还是倒数，输出几号
    int d,week,i;
    if(m==1){m=13;y--;}//公式要求1月、2月要转为上一年13、14月
    if(m==2){m=14;y--;}
    i = 0;
    for(d = B?1:31; d <= B?31:1; B?(d++):(d--)){//B：正数/倒数
    week =(d + 2*m+3*(m+1)/5+y+y/4-y/100+y/400)%7;//蔡勒公式
    if(week+1 == w) ++i;
    if(i == c) break;
 }
 return d;
}
 
int main(void){
 int y;
 while(cin>>y){
 cout<<y<<"-01-01"<<endl;
 printf("%d-01-%02d\n",y,WeekToDay(y,1,3,1,1));
 printf("%d-02-%02d\n",y,WeekToDay(y,2,3,1,1));
 printf("%d-05-%02d\n",y,WeekToDay(y,5,1,1,0));//倒数
 cout<<y<<"-07-04"<<endl;
 printf("%d-09-%02d\n",y,WeekToDay(y,9,1,1,1));
 printf("%d-11-%02d\n",y,WeekToDay(y,11,4,4,1));
 cout<<y<<"-12-25"<<endl<<endl;
 }
 return 0;
}