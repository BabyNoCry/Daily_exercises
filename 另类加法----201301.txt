另类加法：
不允许使用+号，和其他运算符求两个数相加的和。
例：输入 1 3
      输出：4

二进制加法。发现一个特点。
位的异或运算跟求'和'的结果一致：
异或 1^1=0 1^0=1 0^0=0     
求和 1+1=0 1+0=1 0+0=0
位的与运算跟求'进位‘的结果一致：
位与 1&1=1 1&0=0 0&0=0
进位 1+1=1 1+0=0 0+0=0
于是可以用异或运算和与运算来表示加法

class UnusualAdd {
public:
    int addAB(int A, int B) {
        // write code here
        int Xor, And;
        while(B != 0){
            Xor = A^B;
            And = (A&B)<<1;
            A = Xor;
            B = And;
        }
        return A;
    }
};

递归解法
class UnusualAdd {
public:
    int addAB(int A, int B) {
        // write code here
         if(B == 0)
            return A;
        int sum = A ^ B;  
        int flag = (A & B) << 1;
        return addAB(sum,flag);
    }
};




n*m棋盘格子，沿着格子边缘从左上角走到右下角，总共有多少种走法，要求不能回头
，即：只能往右或者往下走，不能往左和网上走。
输入两个整数，返回结果。

输入：2    2
输出：6

代码如下：
递归解法：
#include <iostream>
 
using namespace std;
 
int func(int m, int n) {
    if (m == 0 || n == 0) {
        return 1;
    }
    return func(m, n - 1) + func(m - 1, n);
}
int main() {
    int m, n;
    while (cin >> m >> n) {
        cout << func(m, n) << endl;
    }
 
    return 0;
}



动态规划解法：

#include <iostream>
#include <vector>
 
using namespace std;
 
int main() {
    int m, n;
    while (cin >> m >> n) {
        vector<vector<int> > dp(n + 1, vector<int>(m + 1, 0));
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }
                if (i == 0) {    // 上边界
                    dp[i][j] = dp[i][j - 1];
                } else if (j == 0) {    // 左边界
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        cout << dp[n][m] << endl;
    }
 
    return 0;
}


