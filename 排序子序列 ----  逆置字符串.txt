排序子序列


牛牛定义排序子序列为一个数组中一段连续的子序列,并且这段子序列
是非递增或者非递减排序的。牛牛有一个长度为n的整数数组A,他现在有一个任务是把数组A分为若干段排序子序列,牛牛想知道他最少可以把这个数组分为几段排序子序列.
  如样例所示,牛牛可以把数组A划分为[1,2,3]和[2,2,1]两个排序子序列,
至少需要划分为2个排序子序列,所以输出2
#include<iostream>
#include<vector>
using namespace std;

int main()
{
	int n;
	cin>>n;
	vector<int> v;
	v.resize(n);
	for(int i=0;i<n;++i)
	{
		cin>>v[i];
	}
	int ret=1;
	for(int i=1;i<n-1;i++)
	{
		//找出波峰波谷
		if((v[i-1]<v[i]&&v[i]>v[i+1])||
		(v[i-1]>v[i]&&v[i]<v[i+1])) 
		{
			ret++;
			
			//这里对应处理的就是上面情况二描述的问题 
			if(i!=n-3)
			i++; 
		}
	}
	cout<<++ret<<endl;
}
逆置字符串
例如： I am a boy.
逆置过来为：boy. a am I
#include <iostream>
#include <string>
using namespace std;
// cin读取string时自动会被空格分隔开，用另一个字符串存储进行逆序输出
int main()
{
    string s1, s2;
    cin >> s2;
    while (cin >> s1)
        s2 = s1  + " " + s2;
    cout << s2 << endl;
    return 0;
}


分割数组

#include<iostream>
#include<vector>
using namespace std;

int ArrangeNumb(vector<int> &arr, int N)
{
int numb = 0;
int cont, cont1, cont2;
cont = cont1 = cont2 = 1;
for (int i = 0; i < N; i += cont)
{
for (int j = 0; i + j < N - 1; j++)//升序
{
if (arr[i + j + 1] < arr[i + j])
break;
cont1++;
}
for (int j = 0; i + j < N - 1; j++)//降序
{
if (arr[i + j + 1] > arr[i + j])
break;
cont2++;
}
(cont1 > cont2) ? (cont = cont1) : (cont = cont2);//取大者
cont1 = cont2 = 1;
numb++;
}
    return numb;
}

int main()
{
int n;
cin >> n;
vector<int> str;//vector在堆上开辟内存，避免普通数组在栈上溢出
for (int i = 0, tep; i < n; i++)
{
        cin>>tep;
        str.push_back(tep);
    }
cout << ArrangeNumb(str, n) << endl;
return 0;
}