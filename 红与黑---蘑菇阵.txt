红与黑
有一间长方形的房子，地上铺了红色、黑色两种颜色的正方形瓷砖。你站在其中一块黑色的瓷砖上，只能向相邻的（上下左右四个方向）黑色瓷砖移动。请写一个程序，计算你总共能够到达多少块黑色的瓷砖。

输入描述:
输入包含多组数据。

每组数据第一行是两个整数 m 和 n（1≤m, n≤20）。紧接着 m 行，每行包括 n 个字符。每个字符表示一块瓷砖的颜色，规则如下：

1. “.”：黑色的瓷砖；
2. “#”：白色的瓷砖；
3. “@”：黑色的瓷砖，并且你站在这块瓷砖上。该字符在每个数据集合中唯一出现一次。


输出描述:
对应每组数据，输出总共能够到达多少块黑色的瓷砖。
示例1
输入
9 6
....#.
.....#
......
......
......
......
......
#@...#
.#..#.
输出
45
代码如下：
// write your code here cpp
#include<iostream>
#include<vector>
using namespace std;
int& sum(vector<vector<char> > &v,int x,int y,int& count,int m,int n)
{
    
    if(x-1>=0&&v[x-1][y]=='.')
    {
        v[x-1][y]='o';//走过的黑瓷砖改变其标记，方式递归时重复计算
        count++;
        sum(v,x-1,y,count,m,n);
    }
    
     if(x+1<m&&v[x+1][y]=='.')
    {
        v[x+1][y]='o';
        count++;
        sum(v,x+1,y,count,m,n);
    }
    
     if(y-1>=0&&v[x][y-1]=='.')
    {
        v[x][y-1]='o';
        count++;
        sum(v,x,y-1,count,m,n);
    }
    
    if(y+1<n&&v[x][y+1]=='.')
    {
        v[x][y+1]='o';
        count++;
        sum(v,x,y+1,count,m,n);
    }
    
    
    return count;
}
int main()
{
    int m,n;
    char tmp;
    int x,y;
    
    vector<vector<char> > v;
    while(cin>>m>>n)
    {
        int count=1;
        v.resize(m);//初始化数组
        for(int i=0;i<m;i++)
        {
            v[i].resize(n);//初始化数组
        }
        for(int i=0;i<m;i++)
        {
             for(int j=0;j<n;j++)
             {
                cin>>tmp;
                v[i][j]=tmp;
                 if(tmp=='@')
                 {
                     x=i;
                     y=j;
                 }
             }
        }
        cout<<sum(v,x,y,count,m,n)<<endl;
        
        
    }
    return 0;
}

蘑菇阵

现在有两个好友A和B，住在一片长有蘑菇的由n＊m个方格组成的草地，A在(1,1),B在(n,m)。现在A想要拜访B，由于她只想去B的家，所以每次她只会走(i,j+1)或(i+1,j)这样的路线，在草地上有k个蘑菇种在格子里(多个蘑菇可能在同一方格),问：A如果每一步随机选择的话(若她在边界上，则只有一种选择)，那么她不碰到蘑菇走到B的家的概率是多少？

输入描述:
第一行N，M，K(1 ≤ N,M ≤ 20, k ≤ 100),N,M为草地大小，接下来K行，每行两个整数x，y，代表(x,y)处有一个蘑菇。


输出描述:
输出一行，代表所求概率(保留到2位小数)
示例1
输入
2 2 1
2 1
输出
0.50

#include<vector>
#include<iostream>
#include<stdio.h>
using namespace std;
int main()
{
    int n,m,k;
   
    while(cin>>n>>m>>k)
    {
        vector<vector<double> >v(n+1,vector<double>(m+1));
        vector<vector<int> > table(n+1,vector<int> (m+1));
        int x,y;
        for(int i=0;i<k;i++)
        {
            cin>>x>>y;
            table[x][y]=1;//标记蘑菇
        }
        v[1][1]=1.0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(!(i==1&&j==1))//跳过起点
                {
                v[i][j]=v[i-1][j]*(j==m?1:0.5)+v[i][j-1]*(i==n?1:0.5);//边界的时候概率为1
                if(table[i][j]==1)//如果该点有蘑菇，则路过的可能性为0；
                 v[i][j]=0;
                }
            }
        }
        printf("%.2lf\n",v[n][m]);
        
    }
    return 0;
}