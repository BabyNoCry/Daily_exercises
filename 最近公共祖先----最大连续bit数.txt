最近公共祖先

有一棵无穷大的满二叉树，其结点按根结点一层一层地从左往右依次编号，根结点编号为1。现在有两个结点a，b。请设计一个算法，求出a和b点的最近公共祖先的编号。

给定两个int a,b。为给定结点的编号。请返回a和b的最近公共祖先的编号。注意这里结点本身也可认为是其祖先。

测试样例：
2，3
返回：1

class LCA {
public:
    int getLCA(int a, int b) {
        // write code here
        if(a==1||b==1)
            return 1;
        vector<int> va;
        vector<int> vb;
        while(b!=1&&a!=1)
        {
            if(a/2>0)
            {
                a/=2;
                va.push_back(a);
            }
            if(b/2>0)
            {
                b/=2;
                vb.push_back(b);
            }
        }
        int len1=va.size();
        int len2=vb.size();
        for(int i=0;i<len1;i++)
        {
            for(int j=0;j<len2;j++)
            {
                if(va[i]==vb[j])
                    return va[i];
            }
           }
        return 0;
    }
};



最大连续bit数

题目描述
功能: 求一个byte数字对应的二进制数字中1的最大连续数，例如3的二进制为00000011，最大连续2个1
    
输入: 一个byte型的数字
    
输出: 无
     
返回: 对应的二进制数字中1的最大连续数
输入描述:
输入一个byte数字

输出描述:
输出转成二进制之后连续1的个数

示例1
输入
复制
3
输出
复制
2

#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int a;
    int i=7;
    cin>>a;
    vector<int> v;
    while(i>=0)
    {
    
        v.push_back((a>>i)%2);
        i--;
    }
 
    int count=0;
    int sum=0;
    for(int j=0;j<v.size();j++)
    {
          if(v[j]==1)
          {
              sum++;
          }
        else
        {
            if(sum>count)
            {
                count=sum;
                sum=0;
            }
        }
    }
    if(sum>count)
    {
           count=sum;
    }
    cout<<count;
    return 0;
}