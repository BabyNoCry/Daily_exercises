实现 atoi，将字符串转为整数。

在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。

当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。

若函数不能执行有效的转换，返回 0。

说明：

假设我们的环境只能存储 32 位有符号整数，其数值范围是 [?231,  231 ? 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 ? 1) 或 INT_MIN (?231) 。

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (?231) 。


这个题目是一个比较简单的字符串处理题目，将处理好的字符串转化为整数，只是需要考虑的情况比较多。 
要考虑的情况包括下面这些： 
1、字符串为空 
2、字符串开头有空格 
3、过滤掉字符串开头空格后字符串变为空串 
4、字符串是以数字开头、正负号开头、或者其他字符开头 
以上情况就把特殊情况包含进去了，接下来是处理数字字符串的情况，处理以上情况后我们能得到一个新的字符串，字符串开头为我们要转化的数字，这时我们要考虑一下情况： 
1、数字字符串为空串 
2、数字字符串以0开头 
3、数字字符串过滤掉开头0以后变为了空串 
处理了以上情况后我们就得到了要转化为数字的字符串，要求这个数字在Int范围内，因为长度超过10的都可以pass，其他的直接用long来转化，再与int范围进行比较进行相应输出。 
实现如下：
public class Solution {
    public int StrToInt(String str) {
        if (str == null || str.length() == 0)
            return 0;
        char[] chars = str.toCharArray();
        int symbol = 1;
        if (chars[0] == '-')
            symbol = -1;
        int sum = 0;
        for (int i = (chars[0] == '+' || chars[0] == '-') ? 1:0; i <chars.length; i++)
        {
            if (chars[i] < '0' || chars[i] > '9')
                return 0;
            else
                sum  = sum * 10 + chars[i] - '0';
        }
        return sum * symbol;
    }

